# JCX Matrix-Compatible Dockerfile

FROM alpine:latest

# Set env variables for java to work properly
ENV JAVA_HOME=/opt/java/openjdk \
	PATH="/opt/java/openjdk/bin:$PATH" \
	GLIBC_VERSION="2.31-r1" \
	LD_PRELOAD=/lib/libgcompat.so.0

ARG ARM64_ESUM
ARG ARMV7_ESUM
ARG PPC64LE_ESUM
ARG S390X_ESUM
ARG AMD64_ESUM
ARG ORG
ARG REPO
ARG TYPE
ARG TAG
ARG VERSION
ARG SLIM
ARG NEEDSJLINK



RUN mkdir -p /lib /lib64 /usr/glibc-compat/lib/locale /usr/glibc-compat/lib64 /etc; \
	apk add --no-cache --virtual .fetch-deps curl binutils; \
	ARCH="$(apk --print-arch)"; \
	case "${ARCH}" in \
	aarch64|arm64) \
	ESUM=$ARM64_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_aarch64_linux_hotspot_${VERSION}.tar.gz"; \
	;; \
	# Download glibc and link
	armhf|armv7l|armv7) \
	ESUM=$ARMV7_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_arm_linux_hotspot_${VERSION}.tar.gz"; \
	;; \
	ppc64el|ppc64le) \
	ESUM=$PPC64LE_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_ppc64le_linux_hotspot_${VERSION}.tar.gz"; \
	;; \
	s390x) \
	ESUM=$S390X_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_s390x_linux_hotspot_${VERSION}.tar.gz"; \
	;; \
	amd64|x86_64) \
	ESUM=$AMD64_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_x64_linux_hotspot_${VERSION}.tar.gz"; \
	;; \
	riscv64) \
	ESUM=$RISCV_ESUM; \
	BINARY_URL="https://github.com/${ORG}/${REPO}/releases/download/${TAG}/${TYPE}_riscv64_linux_hotspot_${VERSION}.tar.gz"; \
	;; \

	*) \
	echo "Unsupported arch: ${ARCH}"; \
	exit 1; \
	;; \
	esac; \

	# Download gcompat
	apk add gcompat; \

	# Download OpenJDK
	echo "Downloading OpenJDK with URL: $BINARY_URL"; \
	curl -LfsSo /tmp/openjdk.tar.gz $BINARY_URL; \
	echo "Verifing download with checksum: $ESUM"; \
	echo "${ESUM} */tmp/openjdk.tar.gz" | sha256sum -c -; \
	mkdir -p /opt/java/openjdk; \
	cd /opt/java/openjdk; \
	tar -xf /tmp/openjdk.tar.gz --strip-components=1; \

	# ---------- NEEDSJLINK START ----------
	# $NEEDSJLINK
	# Some images (namely Termurin 16) do not have a JRE, so we need to run jlink to generate one
	# You may recall that Temurin / Adoptium were due to stop making JRE builds, but this was reverted.
	# See platform-matrix-header.txt for details.
	if [ "$NEEDSJLINK" = "yes" ]; \
	then \
	echo "[jlink] Building... (with set -x)"; \
	set -x; \
	# We are going to try to recreate the 'legacy' JRE builds that Adoptium create.
	# https://blog.adoptium.net/2021/10/jlink-to-produce-own-runtime/#:~:text=shown%20in%20the-,following%20command%3A,-jdk%2D17%2B35
	# Excluding: 
	# - jdk.internal.vm.ci (not available on all platforms)
	# - jdk.internal.vm.compiler (not found - not present in upstream build?)
	#   - jdk.internal.vm.compiler.management
	_JAVA_OPTIONS="-Djdk.lang.Process.launchMechanism=vfork" jlink --add-modules java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.management.rmi,java.naming,java.net.http,java.prefs,java.rmi,java.scripting,java.se,java.security.jgss,java.security.sasl,java.smartcardio,java.sql,java.sql.rowset,java.transaction.xa,java.xml,java.xml.crypto,jdk.accessibility,jdk.charsets,jdk.crypto.cryptoki,jdk.crypto.ec,jdk.dynalink,jdk.httpserver,jdk.incubator.foreign,jdk.incubator.vector,jdk.jdwp.agent,jdk.jfr,jdk.jsobject,jdk.localedata,jdk.management,jdk.management.agent,jdk.management.jfr,jdk.naming.dns,jdk.naming.rmi,jdk.net,jdk.nio.mapmode,jdk.sctp,jdk.security.auth,jdk.security.jgss,jdk.unsupported,jdk.xml.dom,jdk.zipfs \
	--output /opt/java/openjdk-jre \
	--strip-debug \
	--no-man-pages \
	--no-header-files \
	--compress=2; \

	# Now we delete the old (jdk) and replace it with the new JRE equivalent.
	rm -rf /opt/java/openjdk/; \
	mv /opt/java/openjdk-jre /opt/java/openjdk; \
	set +x; \
	fi; \
	# ---------- NEEDSJLINK END -------

	# Cleaning up...
	apk del --purge .fetch-deps; \
	rm -rf /var/cache/apk/*; \
	rm -rf /tmp/openjdk.tar.gz; \
	rm -rf /tmp/zlib; \
	echo "Done!"; \
	cd /; \
	LD_PRELOAD=/lib/libgcompat.so.0 java -version;